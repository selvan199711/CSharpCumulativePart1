@model CSharpCumulativePart2.Models.Teacher
@{
    ViewData["Title"] = $"Edit Teacher #{Model.TeacherId}";
}

<h1>Edit Teacher @Model.TeacherId</h1>

<div id="alert" style="display:none; padding:10px; border-radius:8px; margin-bottom:12px;"></div>

<form id="editForm">
    <input type="hidden" id="TeacherId" name="TeacherId" value="@Model.TeacherId" />

    <label>
        First Name
        <input id="FirstName" name="FirstName" value="@Model.FirstName" />
    </label>
    <div class="err" id="errFirstName" style="color:#b91c1c; font-size:.9rem;"></div>

    <label>
        Last Name
        <input id="LastName" name="LastName" value="@Model.LastName" />
    </label>
    <div class="err" id="errLastName" style="color:#b91c1c; font-size:.9rem;"></div>

    <label>
        Employee Number
        <input id="EmployeeNumber" name="EmployeeNumber" value="@Model.EmployeeNumber" />
    </label>
    <div class="err" id="errEmployeeNumber" style="color:#b91c1c; font-size:.9rem;"></div>

    <label>
        Hire Date
        <input type="date" id="HireDate" name="HireDate" value="@Model.HireDate.ToString("yyyy-MM-dd")" />
    </label>
    <div class="err" id="errHireDate" style="color:#b91c1c; font-size:.9rem;"></div>

    <label>
        Salary
        <input type="number" step="0.01" id="Salary" name="Salary" value="@Model.Salary" />
    </label>
    <div class="err" id="errSalary" style="color:#b91c1c; font-size:.9rem;"></div>

    <label>
        Work Phone (optional)
        <input id="WorkPhone" name="WorkPhone" value="@Model.WorkPhone" placeholder="e.g., 416-555-1234" />
    </label>
    <div class="err" id="errWorkPhone" style="color:#b91c1c; font-size:.9rem;"></div>

    <div style="margin-top:12px;">
        <button id="btnSave" type="submit">Save</button>
        <a href="/TeacherPage/Edit/@Model.TeacherId">Reset</a>
    </div>
</form>

<script>
    const $ = (s)=>document.querySelector(s);
    const showAlert = (msg, ok=true)=>{
      const box = $("#alert");
      box.textContent = msg;
      box.style.display = "block";
      box.style.background = ok ? "#dcfce7" : "#fee2e2";
      box.style.border = ok ? "1px solid #22c55e" : "1px solid #ef4444";
      box.style.color = ok ? "#166534" : "#7f1d1d";
    };

    const clearErrors = ()=>{
      document.querySelectorAll(".err").forEach(e=> e.textContent = "");
      $("#alert").style.display = "none";
    };

    const validateClient = (data)=>{
      const errs = {};
      if(!data.firstName || data.firstName.trim()==="") errs.firstName = "First name cannot be empty.";
      if(!data.lastName || data.lastName.trim()==="") errs.lastName = "Last name cannot be empty.";
      if(!data.employeeNumber || data.employeeNumber.trim()==="") errs.employeeNumber = "Employee number is required.";
      if(!data.hireDate) errs.hireDate = "Hire date is required.";
      if(data.hireDate){
         const d = new Date(data.hireDate);
         const today = new Date(); today.setHours(0,0,0,0);
         if(d > today) errs.hireDate = "Hire date cannot be in the future.";
      }
      if(data.salary === "" || isNaN(Number(data.salary))) errs.salary = "Salary must be a number.";
      if(Number(data.salary) < 0) errs.salary = "Salary must be 0 or greater.";
      return Object.keys(errs).length ? errs : null;
    };

    $("#editForm").addEventListener("submit", async (e)=>{
      e.preventDefault();
      clearErrors();

      const id = Number($("#TeacherId").value);
      const body = {
        teacherId: id,
        firstName: $("#FirstName").value,
        lastName: $("#LastName").value,
        employeeNumber: $("#EmployeeNumber").value,
        hireDate: $("#HireDate").value, 
        salary: Number($("#Salary").value),
        workPhone: $("#WorkPhone").value || null
      };

      const errs = validateClient(body);
      if (errs) {
        if (errs.firstName) $("#errFirstName").textContent = errs.firstName;
        if (errs.lastName) $("#errLastName").textContent = errs.lastName;
        if (errs.employeeNumber) $("#errEmployeeNumber").textContent = errs.employeeNumber;
        if (errs.hireDate) $("#errHireDate").textContent = errs.hireDate;
        if (errs.salary) $("#errSalary").textContent = errs.salary;
        showAlert("Please fix the highlighted errors.", false);
        return;
      }

      try{
        const resp = await fetch(`/api/TeacherAPI/${id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body)
        });

        if (resp.ok) {
          showAlert("Teacher updated successfully.");
        } else {
          const data = await resp.json().catch(()=>({}));
          if (data && data.errors){
            if (data.errors.firstName) $("#errFirstName").textContent = data.errors.firstName;
            if (data.errors.lastName) $("#errLastName").textContent = data.errors.lastName;
            if (data.errors.hireDate) $("#errHireDate").textContent = data.errors.hireDate;
            if (data.errors.salary) $("#errSalary").textContent = data.errors.salary;
          }
          showAlert(data.message || "Update failed. Check errors and try again.", false);
        }
      }catch(err){
        showAlert("Network or server error. Please try again.", false);
      }
    });
</script>
